packet ClientPacket
    __unknown_1
        __unknown_1: u32

    __unknown_2
        __unknown_1: u32

    __unknown_3
        __unknown_1: u32

    __unknown_4
        __unknown_1: sizedarray<f32, 10>

    ActivateUpgrade
        # The upgrade to activate. The game is prepared for 28 (30?)
        # different types of powerups, but only 8 are available as
        # of Artemis 2.4.
        target: enum<u32, UpgradeActivation>

    AudioCommand
        # The ID for the audio message. This is given by the
        # IncomingAudioPacket.
        audio_id: i32

        # The desired action to perform.
        audio_command: enum<u32, AudioCommand>

    # Notifies the server that a new target has been selected on the captain's map.
    CaptainSelect
        # The object ID for the new target, or 1 if the target has been cleared.
        target_id: i32

    # Causes the ship to climb or dive. This differs from
    # HelmSetPitchPacket in that it indicates a direction in which to
    # change the ship's current pitch, rather than setting a precise
    # pitch value. The circumstances in which one type of packet might
    # be sent versus the other are not fully understood at this time.
    ClimbDive
        # Indicates the change in the ship's direction: 0x00000001 (1) for down,
        # 0xffffffff (-1) for up. For example, if the ship is diving when the
        # instruction to go up is received, the ship will level out. If a second
        # up command is received, the ship will start climbing.
        direction: i32

    # Sends a COMMs message to the server.
    CommsOutgoing
        # The type of target for the message.
        comm_target_type: i32

        # ID of the object that is to receive the message.
        recipient_id: i32

        # A value that indicates what message is to be transmitted. The
        # interpretation of the value depends on the COMM target type.
        message: i32

        # The ID of the object to be targeted by the message. Currently, the
        # only message that accepts a target is “Other ship: Go defend
        # [target].” This value will be ignored if the message cannot support a
        # target, but must still be provided; the value 0x00730078 has been
        # observed in this case, but it is unknown why.
        target_object_id: u32

        # Possibly reserved for a second message argument. It is
        # always ignored but must still be provided. The value of
        # 0x004f005e has been observed for this field, but it is
        # unknown why.
        __unknown1: u32

    # Converts a homing torpedo to energy or vice versa.
    ConvertTorpedo
        # Indicates whether we are converting a torpedo to energy (0.0,
        # 0x00000000) or energy to a torpedo (1.0, 0x3f800000). Why this is
        # expressed as a float when a byte seems like it would be more
        # appropriate is unknown.
        direction: f32

        # padding, because this packet is of type "valueFourInts"
        __unused_1: u32

        # padding, because this packet is of type "valueFourInts"
        __unused_2: u32

        # padding, because this packet is of type "valueFourInts"
        __unused_3: u32

    # Sent from the engineering station, to request a full
    # update for all values. This causes the server to send
    # a full update, instead of the normal update type where
    # only changes are sent.
    EngRequestGridUpdate
        # Always 0.
        __unused: u32

    # Directs a DAMCON team to go to a particular grid location on the ship.
    EngSendDamcon
        # The number assigned to the team (0 to 2 inclusive).
        team_number: i32

        # The X coordinate of the grid location that is the team's destination.
        x_coordinate: i32

        # The Y coordinate of the grid location that is the team's destination.
        y_coordinate: i32

        # The Z coordinate of the grid location that is the team's destination.
        z_coordinate: i32

    # Notifies the server that DAMCON team autonomy has been togged on/off.
    EngSetAutoDamcon
        # Indicates whether DAMCON team autonomy is on or off.
        autonomous: bool32

    # Sets the amount of coolant to be allocated to a system.
    EngSetCoolant
        # The system whose coolant level is being adjusted.
        ship_system: enum<u32, ShipSystem>

        # The number of coolant units to allocate to the system (0 to 8
        # inclusive).
        value: i32

        # padding, because this packet is of type "valueFourInts"
        __unused_1: u32

        # padding, because this packet is of type "valueFourInts"
        __unused_2: u32

    # Sets the amount of energy to be allocated to a system.
    EngSetEnergy
        # The amount of energy to allocate to the system. This value can range
        # from 0.0 to 1.0 inclusive, which in the stock UI corresponds to 0% to
        # 300%. Therefore, the default energy allocation of 100% would be
        # represented as 0.333....
        value: f32

        # The system whose coolant level is being adjusted.
        ship_system: enum<u32, ShipSystem>

    # Notifies the server that a fighter is being launched. The server
    # will send back a FighterLaunchedPacket in response.
    FighterLaunch
        # The ID of the fighter, as shown in FighterBayStatusPacket.
        object_id: u32

    # Notifies the server that the weapons officer wants to manually
    # fire beam weapons.
    FireBeam
        # The ID of the ship or entity at which to fire.
        target_object_id: u32

        # The X coordinate at which to fire, relative to the center of the
        # target ship.
        x_coordinate: f32

        # The Y coordinate at which to fire, relative to the center of the
        # target ship.
        y_coordinate: f32

        # The Z coordinate at which to fire, relative to the center of the
        # target ship.
        z_coordinate: f32

    # Notifies the server that the weapons officer wants to fire
    # whatever's loaded in a certain tube.
    FireTube
        # The index number of the tube to fire.
        tube_index: u32

    # New as of v2.4.0. Sent by the client when the game master clicks
    # on a button created by GameMasterButtonPacket.
    GameMasterButtonClick
        # Appears to always be 0x0d.
        __unknown_1: u32

        # The JamCRC32 hash value of the button title. This is also
        # used as an identifier for the button
        hash: u32

    # Notifies the server that a new target has been selected on the
    # game master's map.
    GameMasterSelectLocation
        # The coordinate of the selected location on the Z axis.
        z_coordinate: f32

        # Seems to always be `0x00000000`.
        y_coordinate: f32

        # The coordinate of the selected location on the X axis.
        x_coordinate: f32

    # New as of v2.4.0. A packet sent by the game master console to the server which
    # causes a message to be displayed on a client.
    GameMasterMessage
        # FIXME: perhaps ship_index?
        __unknown_1: u32

        # If this value is 0x00, the message is received by the communications
        # officer as a normal COMM message. Otherwise, it is sent as a popup
        # message at a particular console type. The console that receives the
        # message is determined by subtracting 1 from the value; the result then
        # matches the values for the console type enumeration.
        console_type: option<enum<u32, ConsoleType>>

        # The name of the message's sender. This can be any arbitrary string; it
        # doesn't have to match the name of an existing object.
        sender: string

        # The message to send.
        message: string

    # Notifies the server that a new target has been selected on the game master's map.
    GameMasterSelectObject
        # ID of the selected object.
        target_id: i32

    # Initiates a jump. Note that the stock client molly-guards jumps,
    # asking for confirmation from helm. This packet isn't sent until
    # helm confirms the jump.
    HelmJump
        # The direction to jump, expressed as a value between 0.0 and 1.0
        # inclusive. To compute this value, take the desired bearing in degrees
        # and divide by 360.
        bearing: f32

        # The distance to jump, expressed as a value between 0.0 and 1.0
        # inclusive. To compute this value, take the desired distance in μls and
        # divide by 50 (the maximum jump distance).
        distance: f32

    # Request docking with the nearest station, or, in the case of a fighter, with its mothership.
    HelmRequestDock
        # Always 0x00.
        __unknown_1: u32

    # Sets the throttle for impulse engines.
    HelmSetImpulse
        # Any value between 0.0 and 1.0 inclusive, where 0.0 is no throttle and
        # 1.0 is full throttle. Actual velocity will depend on the ship's
        # maximum velocity and the power allocated to impulse by engineering.
        throttle: f32

    # Sets the desired pitch for the player ship. This differs from
    # ClimbDivePacket in that it sets a precise pitch value for the
    # ship instead of just indicating a direction to change pitch. The
    # circumstances in which one type of packet might be sent versus
    # the other are not fully understood at this time.
    HelmSetPitch
        # Any value between -1.0 and 1.0 inclusive, where 0.0 is level, -1.0 is
        # a hard climb, and 1.0 is a hard dive.
        pitch: f32

    # Sets the position of the ship's "rudder", controlling its turn rate.
    HelmSetSteering
        # Any value between 0.0 and 1.0 inclusive, where 0.0 is hard to port
        # (left), 0.5 is rudder amidships (straight), and 1.0 is a hard to
        # starboard (right). Actual turn rate will depend on the ship's maximum
        # turn rate and the power allocated to maneuvering by engineering.
        rudder: f32

    # Sets the ship's warp factor. Actual velocity will depend on the
    # power allocated to warp by engineering.
    HelmSetWarp
        # The desired warp factor, from 0 to 4 inclusive. Warp 0 means to drop
        # out of warp and move on impulse only.
        warp_factor: i32

    # Toggles the impulse engines between forward and reverse drive.
    HelmToggleReverse
        # Always 0x00.
        __unused_1: u32

    # Informs the server that the player at this console pressed a
    # particular key. This is used for custom mission scripts to allow
    # keystrokes to trigger events. This packet should only be sent
    # when keystroke capture is enabled for the console in question.
    # Keystroke capture is always enabled for the game master console;
    # other consoles require the script to activate keystroke capture
    # first.
    Keystroke
        # The code identifying the key that was pressed. Microsoft has a good
        # reference page that documents the key codes. Many languages have
        # constants for these values. For example: in Java, they are defined in
        # the KeyEvent class.
        key_code: i32

    # Loads a tube with a particular type of ordnance.
    LoadTube
        # Indicates which tube is to be loaded.
        tube_index: i32

        # The type of ordnance to load into the tube.
        ordnance_type: enum<u32, OrdnanceType>

        __unknown_1: u32

        __unknown_2: u32

    # Sent by the client when they click the "Ready" button to indicate that
    # it is ready to join the game. The client must select at least one station before
    # sending this packet. When a game ends, the stock client typically sends this packet
    # again immediately, on the assumption that they will play again with the same
    # console(s).
    Ready
        # Always 0.
        __unused: u32

    # Starts a science scan.
    SciScan
        # The object ID for the target to be scanned.
        target_id: i32

    # Notifies the server that a new target has been selected on the science map.
    SciSelect
        # The object ID for the new target, or 1 if the target has been cleared.
        target_id: i32

    # Sets the beam frequency.
    SetBeamFreq
        # The new beam frequency.
        beam_frequency: enum<u32, BeamFrequency>

    # Sets whether or not this client will use a particular console. A
    # single client may use multiple consoles, and some consoles allow
    # multiple clients to use them. Clients should send SetShipPacket
    # before sending this one.
    SetConsole
        # The console whose status is being updated.
        console_type: enum<u32, ConsoleType>

        # True if this client is using the indicated console, false otherwise.
        selected: bool32

    # Sets the view to display on the main screen.
    SetMainScreen
        # The view to display on the main screen.
        main_screen_view: enum<u32, MainScreenView>

    # Sets which ship the client will be on. This should be sent before SetConsolePacket.
    SetShip
        # The index of the desired ship; valid values are 0 through 7 inclusive.
        ship_index: i32

    # Sets the name, ship type and drive type for the currently-selected ship. (version 2.1.0 up to 2.3.0)
    SetShipSettingsV211
        ship: struct<ShipV211>

    # Sets the name, ship type and drive type for the currently-selected ship. (version 2.4.0+)
    SetShipSettingsV240
        ship: struct<Ship>

    # Notifies the server that a new target has been selected on the weapons console.
    SetWeaponsTarget
        # The object ID for the new target, or 1 if the target has been cleared.
        target_id: i32

    # Informs the server that the auto beams setting has been toggled.
    ToggleAutoBeams
        # Always 0.
        __unused: u32

    # Toggles between first- and third-person perspective on the main screen.
    TogglePerspective
        # Always 0.
        __unused: u32

    # Toggles the ship's red alert status.
    ToggleRedAlert
        # Always 0.
        __unused: u32

    # Toggles the shields up or down.
    ToggleShields
        # Always 0.
        __unused: u32

    # Removes whatever ordnance is loaded in a tube.
    UnloadTube
        # Index of the tube to unload.
        tube_index: i32
