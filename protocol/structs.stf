struct ShipV240
    # Whether the ship has warp or jump drive
    drive_type: enums.DriveType<u32>

    # ID from vesselData.xml
    ship_type: u32

    accent_hue: f32

    __unknown_1: u32

    # The name of the ship
    name: string

struct ShipV210
    # The desired drive type.
    drive_type: enums.DriveType<u32>

    # The ID of the desired type of vessel, as given in vesselData.xml.
    vessel_id: i32

    __unknown_1: u32

    # The name of the ship
    name: string

struct SystemNodeStatus
    # The X coordinate of the node relative to the ship's center.
    x_coordinate: u8

    # The Y coordinate of the node relative to the ship's center.
    y_coordinate: u8

    # The Z coordinate of the node relative to the ship's center.
    z_coordinate: u8

    # The current damage level for this node. An undamaged node has a value
    # of 0.0; any higher value indicates damage. (Is there an upper limit to
    # this value?)
    damage: f32

struct DamconTeamStatus
    # An ID assigned to this team. For some reason known only to Thom, this
    # value always has 0x0a added to it.
    team_id: u8

    # The X coordinate of the node to which this team is currently moving.
    # If the team does not want to move elsewhere, this will be the same as
    # their current X coordinate.
    goal_x_coordinate: i32

    # The X coordinate of the team's current node. This value does not
    # change while the team in in transit; it is only updated when they
    # arrive at a new node.
    current_x_coordinate: i32

    # The Y coordinate of the node to which this team is currently moving.
    # If the team does not want to move elsewhere, this will be the same as
    # their current Y coordinate.
    goal_y_coordinate: i32

    # The Y coordinate of the team's current node. This value does not
    # change while the team in in transit; it is only updated when they
    # arrive at a new node.
    current_y_coordinate: i32

    # The Z coordinate of the node to which this team is currently moving.
    # If the team does not want to move elsewhere, this will be the same as
    # their current Z coordinate.
    goal_z_coordinate: i32

    # The Z coordinate of the team's current node. This value does not
    # change while the team in in transit; it is only updated when they
    # arrive at a new node.
    current_z_coordinate: i32

    # A value between 0.0 and 1.0 that expresses how close the team is in
    # their progress towards the goal node. The value starts at 1.0 as the
    # team begins moving towards the goal node, and gradually decreases
    # until it reaches 0.0 upon their arriving at the goal.
    progress: f32

    # The number of people on this DAMCON team.
    number_of_team_members: i32

struct FighterBay
    object_id: u32

    fighter_name: string

    fighter_class_name: string

    # Number of seconds of refit time remaining before fighter is ready to
    # launch.
    refit_time: i32

struct Statistic
    __unknown_1: u8

    # The numeric value for this statistic.
    value: i32

    # The description for this statistic.
    label: string

struct ObjectUpdateV210
    # The type of object represented by this entry. All objects in the same
    # array will be of the same type. If you get 0x00 for this field, there
    # are no more objects in the array. Prior to v2.1.5, this property was
    # transmitted as an int rather than a byte.
    object_type: enums.ObjectTypeV210<u32>

    # A unique identifier assigned to this object.
    object_id: u32

    # In order to minimize the amount of data that has to be transmitted
    # the server typically only sends the properties that have changed
    # instead of the entire object every time. This bit field indicates
    # which properties are included in the update. Each bit represents a
    # single property; if a bit is set to 1, that property is included. The
    # length of the bit field depends the number of properties the object
    # has.
    update: struct<Update>
    # bit_field: <error: variable-length>

    # The rest of the entry consists of the updated values for the
    # properties indicated in the bit field.
    # properties: <error: variable-length>

struct ObjectUpdateV240
    # The type of object represented by this entry. All objects in the same
    # array will be of the same type. If you get 0x00 for this field, there
    # are no more objects in the array. Prior to v2.1.5, this property was
    # transmitted as an int rather than a byte.
    object_type: enums.ObjectTypeV240<u8>

    # A unique identifier assigned to this object.
    object_id: u32

    # In order to minimize the amount of data that has to be transmitted
    # the server typically only sends the properties that have changed
    # instead of the entire object every time. This bit field indicates
    # which properties are included in the update. Each bit represents a
    # single property; if a bit is set to 1, that property is included. The
    # length of the bit field depends the number of properties the object
    # has.
    update: struct<Update>
    # bit_field: <error: variable-length>

    # The rest of the entry consists of the updated values for the
    # properties indicated in the bit field.
    # properties: <error: variable-length>

struct Version
    major: u32
    minor: u32
    patch: u32
