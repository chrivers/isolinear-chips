object Anomaly(1)
    x_coordinate: f32
    y_coordinate: f32
    z_coordinate: f32
    # Upgrade (byte 1.4, enum, int)
    # Note that only the values 0x00 through 0x07 have been observed, as the built-in mission types do not put other upgrade types in anomaly pickups.
    upgrade: enum<u32, Upgrade>
    __unknown_1: u32
    __unknown_2: u32
    __unknown_3: u32

object Base(2)
    # Name (bit 1.1, string)
    #
    # The name assigned to this base. In standard, non-custom
    # scenarios, base names will be unique, but there is no
    # guarantee that the same will be true in custom scenarios.
    name: string

    # Shields (bit 1.2, float)
    #
    # The current strength of the base's shields.
    front_shields: f32

    # Rear shields (unused) (bit 1.3, float)
    #
    # Bases only have one shield, but all shielded objects in
    # Artemis are encoded with front and rear shields. This value is
    # therefore meaningless and should be ignored.
    rear_shields: f32

    # Index (bit 1.4, int)
    #
    # The index of this base. Each base will have a unique index
    # from 0 to (number of bases-1). In a standard solo game, DS1 is
    # 0, DS2 is 1, etc.
    index: u32

    # Vessel type (bit 1.5, int)
    #
    # The vessel type ID, as found in vesselData.xml.
    vessel_type_id: u32

    # X coordinate (bit 1.6, float)
    #
    # The base's location along the X-axis.
    x_coordinate: f32

    # Y coordinate (bit 1.7, float)
    #
    # The base's location along the Y-axis.
    y_coordinate: f32

    # Z coordinate (bit 1.8, float)
    #
    # The base's location along the Z-axis.
    z_coordinate: f32

    # Unknown (bit 2.1, 4 bytes)
    __unknown_1: u32

    # Unknown (bit 2.2, 4 bytes)
    __unknown_2: u32

    # Unknown (bit 2.3, 4 bytes)
    __unknown_3: u32

    # Unknown (bit 2.4, 4 bytes)
    __unknown_4: u32

    # Unknown (bit 2.5, byte)
    __unknown_5: u8

    # Unknown (bit 2.6, byte)
    __unknown_6: u8

# Note that wrecks are also considered creatures, for some
# reason. This structure is new as of v2.1.5. Previously, the only
# type of creature was the classic space monster, which was handled
# by the “other” property structure, and space whales had their own
# structure.

object Creature(3)
    # X (bit 1.1, float)
    # The X coordinate of this creature.
    x_coordinate: f32

    # Y (bit 1.2, float)
    # The Y coordinate of this creature.
    y_coordinate: f32

    # Z (bit 1.3, float)
    # The Z coordinate of this creature.
    z_coordinate: f32

    # Name (bit 1.4, string)
    # The creature's name
    name: string

    # Heading (bit 1.5, float)
    # The creature's current heading.
    heading: f32

    # Pitch (bit 1.6, float)
    # The creature's current pitch.
    pitch: f32

    # Roll (bit 1.7, float)
    # The creature's current roll.
    roll: f32

    # Creature type (bit 1.8, enum)
    # The type of creature.
    # FIXME: size?
    creature_type_id: enum<u32, CreatureType>

    # Unknown (bit 2.1, 4 bytes)
    __unknown_1: u32

    # Unknown (bit 2.2, 4 bytes)
    __unknown_2: u32

    # Unknown (bit 2.3, 4 bytes)
    __unknown_3: i32

    # Unknown (bit 2.4, 4 bytes)
    __unknown_4: i32

    # Unknown (bit 2.5, 4 bytes)
    __unknown_5: i32

    # Unknown (bit 2.6, 4 bytes)
    __unknown_6: i32

    # Unknown (bit 2.6, 4 bytes)
    __unknown_7: i32

    # Unknown (bit 2.6, 4 bytes)
    __unknown_8: i32

    # Unknown (bit 2.6, 4 bytes)
    __unknown_9: i32

    # Unknown (bit 2.6, 4 bytes)
    __unknown_10: i32

object Drone(2)
    # Unknown (bit 1.1, int)
    __unknown_1: u32

    # X coordinate (bit 1.2, float)
    x_coordinate: f32

    # Unknown (bit 1.3 float)
    # Values observed range from approximately -0.01 to 53.7. Might be related to pitch/yaw.
    __unknown_2: f32

    # Z coordinate (bit 1.4, float)
    z_coordinate: f32

    # Unknown (bit 1.5 float)
    # Perhaps related to pitch/yaw.
    __unknown_3: f32

    # Y coordinate (bit 1.6, float)
    y_coordinate: f32

    # Heading (bit 1.7, float)
    heading: f32

    # Unknown (bit 1.8, int)
    __unknown_4: u32

    # Unknown (bit 2.1, float?, v2.1.5+)
    __unknown_5: u32

    # Unused? (bits 2.2-2.8)

object EngineeringConsole(4)
    # Each byte of the field represents a category of values:

    # Heat levels
    # Energy allocations
    # Coolant allocations

    # The bits in each byte represent the ship systems, in the order
    # specified in the ship system enumeration. So for example, if
    # the first bit field is 0x01, it means that this packet will
    # contain a single heat level value (beams).

    # Heat levels (bits 1.1-1.8, float array)
    ##    heat: map<ShipSystem, f32>
    heat: sizedarray<f32, 8>

    # The heat level for each system, as a value between 0 (no heat)
    # and 1 (maximum heat). Reaching maximum heat for a system will
    # cause an explosion, which will damage a system node of that
    # type and release some of the heat.

    # Energy allocations (bits 2.1-2.8, float array)
    # energy: map<ShipSystem, f32>
    energy: sizedarray<f32, 8>

    # The energy allocation for each system, as a value between 0
    # (no energy allocated) and 1 (maximum possible energy
    # allocation). In the UI, this is expressed as a percentage
    # between 0% and 300%, so the nominal allocation level (100%) is
    # represented by a value of 0.3333....

    # Coolant allocations (bits 3.1-3.8, byte array)
    # The units of coolant allocated to each system.
    # coolant: map<ShipSystem, u8>
    coolant: sizedarray<u8, 8>

# These are arbitrary 3D objects to display in the game world. Players
# and enemies don't interact with these objects; they are just
# decoration.
object GenericMesh(4)
    # X coordinate (bit 1.1, float)
    # The object's location on the X axis.
    x_coordinate: f32

    # Y coordinate (bit 1.2, float)
    # The object's location on the Y axis.
    y_coordinate: f32

    # Z coordinate (bit 1.3, float)
    # The object's location on the Z axis.
    z_coordinate: f32

    # Unknown (bit 1.4, int)
    __unknown_1: u32

    # Unknown (bit 1.5, int)
    __unknown_2: u32

    # Unknown (bit 1.6, int)
    __unknown_3: u32

    # Unknown (bit 1.7, int)
    __unknown_4: f32

    # Unknown (bit 1.8, int)
    pitch: f32

    # Unknown (bit 2.1, int)
    __unknown_5: f32

    # Unknown (bit 2.2, long)
    roll: f32

    # bit 2.3
    __unknown_6: u32

    # bit 2.4
    __unknown_7: u32

    # Name (bit 2.5, string)
    # The name of this object.
    name: string

    # Mesh file (bit 2.6, string)
    # The name of the file containing the 3D mesh data.
    mesh_file: string

    # Texture file (bit 2.7, string)
    # The name of the file containing the texture to apply to the
    # mesh. Note that this uses the same bit as the mesh name, and
    # that bit 2.5 is unused.
    texture_file: string

    # Unknown (bit 2.8, int)
    __unknown_8: f32

    # Unknown (bit 3.1, short)
    __unknown_9: u8

    # Unknown (bit 3.2, byte)
    artscale: f32

    # Red color channel (bit 3.3, float)
    r_color: f32

    # Green color channel (bit 3.4, float)
    g_color: f32

    # Blue color channel (bit 3.5, float)
    b_color: f32

    # Front shields (bit 3.6, float)
    fake_front_shields: f32

    # Rear shields (bit 3.7, float)
    fake_rear_shields: f32

    # Unknown (bit 3.8, int)
    __unknown_11: u8

    # Unknown (bit 4.1, int)
    __unknown_12: u32

    # Unknown (bit 4.2, int)
    __unknown_13: u32

object Nebula(1)
    # X coordinate (bit 1.1, float)
    x_coordinate: f32

    # Y coordinate (bit 1.2, float)
    y_coordinate: f32

    # Z coordinate (bit 1.3, float)
    z_coordinate: f32

    # Red color channel (bit 1.4, float)
    r_color: f32

    # Green color channel (bit 1.5, float)
    g_color: f32

    # Blue color channel (bit 1.6, float)
    b_color: f32

    # Unused? (bit 1.7, int)
    __unknown_1: u32

    # Unused? (bit 1.8, int)
    __unknown_2: u32

object NpcShip(6)
    # Name (bit 1.1, string)
    # The ship's name.
    name: string

    # Throttle (bit 1.2, float)
    # Values range from 0.0 for all stop to 1.0 for full speed.
    throttle: f32

    # Rudder (bit 1.3, float)
    # Values range from 0.0 for hard to port (left), to 1.0 for hard to starboard (right).
    rudder: f32

    # Max impulse (bit 1.4, float)
    # The ship's maximum possible speed at impulse.
    max_impulse: f32

    # Max turn rate (bit 1.5, float)
    # The ship's maximum possible turning speed.
    max_turn_rate: f32

    # Enemy? (bit 1.6, boolean, 4 bytes)
    # In single-bridge games, as well as multi-bridge co-op games
    # this value will be true if the ship is hostile and false if it
    # is friendly. In PvP and scripted games, this field is always
    # true, regardless of whether the NPC is hostile or not.
    enemy: u32

    # Vessel type (bit 1.7, int)
    # The ID corresponding to the <vessel> entry in vesselData.xml that describes the vessel type for this ship.
    vessel_type_id: u32

    # X coordinate (bit 1.8, float)
    x_coordinate: f32

    # Y coordinate (bit 2.1, float)
    y_coordinate: f32

    # Z coordinate (bit 2.2, float)
    z_coordinate: f32

    # Pitch (bit 2.3, float)
    pitch: f32

    # Roll (bit 2.4, float)
    roll: f32

    # Heading (bit 2.5, float)
    heading: f32

    # Velocity (bit 2.6, float)
    velocity: f32

    # Surrendered (bit 2.7, boolean, 1 byte)
    # True if this ship has surrendered; false otherwise.
    surrendered: bool8

    # Unknown (bit 2.8, short)
    __unknown_1: u16

    # Forward shields (bit 3.1, float)
    front_shields: f32

    # Forward shields max (bit 3.2, float)
    front_shields_max: f32

    # Rear shields (bit 3.3, float)
    rear_shields: f32

    # Rear shields (bit 3.4, float)
    # FIXME:
    rear_shields_max: f32

    # Unknown (bit 3.5, short)
    __unknown_2: u16

    # Fleet number (bit 3.6, byte)
    # The number of the fleet to which this ship belongs. For custom
    # missions, this is specified in the mission file.
    fleet_number: u8

    # Elite abilities (bit 3.7, bit field, 4 bytes)
    # The elite abilites posessed by this ship. The value in this
    # field is only meaningful if the ship's faction has the “elite”
    # attribute, as specified in vesselData.xml. Other ships should
    # ignore this value even if it is present, as they cannot have
    # elite abilities.
    elite_abilities: bitflags<u32, EliteAbilities>

    # Active elite abilities (bit 3.8, bit field, 4 bytes)
    # The elite abilites posessed by this ship that are currently in
    # use. As with the previous field, this field should be ignored
    # if the ship can't have elite abilities, even if it is present.
    active_elite_abilities: bitflags<u32, EliteAbilities>

    # Scan level? (bit 4.1, int)
    scan_level: u32

    # Side? (bit 4.2, int)
    # This field appears to contain a different value for each side in the conflict. Ships with the same value will presumably be friendly to each other.
    side: u32

    # Unknown (bit 4.3, int)
    __unknown_3: i32

    # Unknown (bit 4.4, byte)
    __unknown_4: u8

    # Unknown (bit 4.5, byte)
    __unknown_5: u8

    # Unknown (bit 4.6, byte)
    __unknown_6: u8

    # Unknown (bit 4.7, byte)
    __unknown_7: u8

    # Unknown (bit 4.8, float)
    # Values of 0.0 and -100000.0 have been observed.
    __unknown_8: f32

    # Unknown (bit 5.1, int)
    __unknown_9: u32

    # Unknown (bit 5.2, int)
    __unknown_10: u32

    # Ship system damage (bit 5.3 - 6.2, float array)

    # Damage to various ship systems, in the order specified in the
    # enumeration. A system with a damage value of 0.0 is undamaged;
    # a higher value (up to 1.0) means the system is damaged. In the
    # stock client, damaged systems on NPC vessels can be seen via
    # the science console. Barring further damage or actions by a
    # custom script, damage values gradually decrease as the ship is
    # repaired, until they return to 0.0.
    ## system_damage: map<ShipSystem, f32>
    system_damage: sizedarray<f32, 8>

    # Beam frequency resistance (bit 6.3 - 6.7, float array)
    # The ship's resistance to the five beam frequencies. Higher values indicate greater resistance to beams tuned to the corresponding frequency.
    ## beam_resistance: map<BeamFrequency, f32>
    beam_resistance: sizedarray<f32, 5>

# 5 bytes before v2.3.0
object PlayerShip(6)
    # Unknown (bit 1.1, int)
    # This might be the ship targeted by the weapons console.
    __unknown_1: u32

    # Impulse (bit 1.2, float)
    #
    # Current impulse power for this ship. Values range from 0.0
    # (all stop) to 1.0 (full speed) inclusive.
    impulse: f32

    # Rudder (bit 1.3, float)
    #
    # Values range from 0.0 to 1.0 inclusive, with 0.0 meaning hard
    # to port (left), 0.5 meaning rudder amidships (straight), and
    # 1.0 meaning hard to starboard (right).
    rudder: f32

    # Top speed (bit 1.4, float)
    top_speed: f32

    # Turn rate (bit 1.5, float)
    turn_rate: f32

    # Auto beams (bit 1.6, boolean, 1 byte)
    auto_beams: bool8

    # Warp factor (bit 1.7, byte)
    warp_factory: u8

    # Energy reserves (bit 1.8, float)
    energy: f32

    # Shields up/down (bit 2.1, boolean, 2 bytes)
    shields_up: bool16

    # Ship number (bit 2.2, int)
    ship_number: u32

    # Ship type? (bit 2.3, int)
    ship_type: u32

    # X coordinate (bit 2.4, float)
    # The ship's location on the X axis.
    x_coordinate: f32

    # Y coordinate (bit 2.5, float)
    # The ship's location on the Y axis.
    y_coordinate: f32

    # Z coordinate (bit 2.6, float)
    # The ship's location on the Z axis.
    z_coordinate: f32

    # Pitch (bit 2.7, float)
    #
    # (values still uncertain) Values range from -1.0 to 1.0
    # inclusive, where -1.0 means the port (left) side points
    # straight “up” and 1.0 means it points straight “down.”
    pitch: f32

    # Roll (bit 2.8, float)
    #
    # (values still uncertain) Values range from -1.0 to 1.0
    # inclusive, where -1.0 means straight “up” and 1.0 means
    # straight “down.”
    roll: f32

    # Heading (bit 3.1, float)
    #
    # A value from pi to negative pi. A value of pi corresponds to a
    # heading of 0° (or “north”). The ship turns to port (left) as
    # the value decreases. A value of 0.0 corresponds to a heading
    # of 180° (or “south”).
    heading: f32

    # Velocity (bit 3.2, float)
    #
    # A value from pi to negative pi. A value of pi corresponds to a
    # heading of 0° (or “north”). The ship turns to port (left) as
    # the value decreases. A value of 0.0 corresponds to a heading
    # of 180° (or “south”).
    velocity: f32

    # Unknown (bit 3.3, short)
    __unknown_2: u16

    # Ship name (bit 3.4, string)
    ship_name: string

    # Front shields (bit 3.5, float)
    #
    # Current strength of forward shield. A value greater than 0.0
    # indicates that this shield is up, while a value of 0.0 or less
    # means it's down. If enemy fire penetrates the shield, this
    # value can go negative; it will climb back towards 0.0 as the
    # shield recovers.
    front_shields: f32

    # Forward shields max (bit 3.6, float)
    # The maximum strength of the forward shield.
    front_shields_max: f32

    # Rear shields (bit 3.7, float)
    #
    # Current strength of rear shield. A value greater than 0.0
    # indicates that this shield is up, while a value of 0.0 or less
    # means it's down. If enemy fire penetrates the shield, this
    # value can go negative; it will climb back towards 0.0 as the
    # shield recovers.
    rear_shields: f32

    # Rear shields max (bit 3.8, float)
    # The maximum strength of the aft shield.
    rear_shields_max: f32

    # Last docked base (bit 4.1, int)
    #
    # The ID of the base that most recently initiated docking with
    # the ship. This field updates when a base's tractor beam
    # latches onto the ship. Undocking does not change this field;
    # to detect undocking, watch for the ship's impulse (bit 1.2) or
    # warp factor (bit 1.7) fields to go above zero.
    last_docked_base: u32

    # Alert status (bit 4.2, byte, enumeration)
    alert_status: enum<u8, AlertStatus>

    # Unknown (bit 4.3, float)
    __unknown_3: f32

    # Main screen view (bit 4.4, byte, enumeration)
    # The view currently displayed on the ship's main screen.
    main_screen_view: enum<u8, MainScreenView>

    # Beam frequency (bit 4.5, byte, enumeration)
    # The frequency to which the beams are currently tuned.
    beam_frequency: enum<u8, BeamFrequency>

    # Available coolant or missiles (bit 4.6, byte)
    # The total amount of coolant if a capital ship, or the number of missiles if a fighter.
    available_coolant: u8

    # Science target (bit 4.7, int)
    # The ID of the object selected by the science officer, or 1 if the selection was cleared.
    science_target: u32

    # Captain target (bit 4.8, int)
    # The ID of the object selected by the captain, or 1 if the selection was cleared.
    captain_target: u32

    # Drive type (bit 5.1, byte, enumeration)
    # The type of drive system the ship has.
    drive_type: u8

    # Scanning ID (bit 5.2, int)
    # The ID of the object currently being scanned by the science officer.
    science_scan_id: u32

    # Scanning progress (bit 5.3, float)
    # A value from 0.0 to 1.0 inclusive indicating the current progress of the active science scan.
    science_scan_progress: f32

    # Reverse (bit 5.4, boolean, 1 byte)
    # True if the impulse drive is in reverse; false otherwise.
    reverse: bool8

    # Unknown (bit 5.5, float)
    # Usually 0.0, though -1.0 has been observed.
    __unknown_4: f32

    # Unknown (bit 5.6, byte)
    # 0x02 has been observed.
    __unknown_5: u8

    # Unknown (bit 5.7, 4 bytes)
    __unknown_6: u32

    # Unknown (bit 5.8, byte, new as of v2.3.0)
    # 0 has been observed.
    __unknown_7: u8

    # Capital ship object ID (bit 6.1, int, new as of v2.3.0)
    # The object ID of the associated capital ship, if this ship is a fighter.
    capital_ship_id: u32

    # Accent Color (bit 6.2, int, new as of v2.4.0)
    # The accent hue of the ship.
    accent_hue: f32

    # Unknown (bit 6.3, 4 bytes, new as of v2.4.0)
    __unknown_8: u32

# New as of v2.1.5. Indicates how many of each upgrade the player ship
# has on board.
object PlayerShipUpgrades(11)
    ## active
    # bit 1.1
    active_infusion_p_coils:       bool8
    # bit 1.2
    active_hydrogen_ram:           bool8
    # bit 1.3
    active_tauron_focusers:        bool8
    # bit 1.4
    active_carapaction_coils:      bool8
    # bit 1.5
    active_polyphasic_capacitors:  bool8
    # bit 1.6
    active_cetrocite_crystals:     bool8
    # bit 1.7
    active_lateral_array:          bool8
    # bit 1.8
    active_ecm_starpulse:          bool8

    # bit 2.1
    active_double_agent:           bool8
    # bit 2.2
    active_wartime_production:     bool8
    # bit 2.3
    active_infusion_p_coils_perm:  bool8
    # bit 2.4
    active_protonic_verniers:      bool8
    # bit 2.5
    active_tauron_focusers_perm:   bool8
    # bit 2.6
    active_regenerative_pau_grids: bool8
    # bit 2.7
    active_veteran_damcon_teams:   bool8
    # bit 2.8
    active_cetrocite_heatsinks:    bool8

    # bit 3.1
    active_tachyon_scanners:       bool8
    # bit 3.2
    active_gridscan_overload:      bool8
    # bit 3.3
    active_override_authorization: bool8
    # bit 3.4
    active_resupply_imperatives:   bool8
    # bit 3.5
    active_patrol_group:           bool8
    # bit 3.6
    active_fast_supply:            bool8
    # bit 3.7
    active_vanguard_refit_helm:    bool8
    # bit 3.8
    active_vanguard_refit_weap:    bool8

    # bit 4.1
    active_vanguard_refit_comm:    bool8
    # bit 4.2
    active_vanguard_refit_station: bool8
    # bit 4.3
    active_vanguard_refit_eng:     bool8
    # bit 4.4
    active_vanguard_refit_systems: bool8

    ## count
    # bit 4.5
    count_infusion_p_coils:       i8
    # bit 4.6
    count_hydrogen_ram:           i8
    # bit 4.7
    count_tauron_focusers:        i8
    # bit 4.8
    count_carapaction_coils:      i8

    # bit 5.1
    count_polyphasic_capacitors:  i8
    # bit 5.2
    count_cetrocite_crystals:     i8
    # bit 5.3
    count_lateral_array:          i8
    # bit 5.4
    count_ecm_starpulse:          i8
    # bit 5.5
    count_double_agent:           i8
    # bit 5.6
    count_wartime_production:     i8
    # bit 5.7
    count_infusion_p_coils_perm:  i8
    # bit 5.8
    count_protonic_verniers:      i8

    # bit 6.1
    count_tauron_focusers_perm:   i8
    # bit 6.2
    count_regenerative_pau_grids: i8
    # bit 6.3
    count_veteran_damcon_teams:   i8
    # bit 6.4
    count_cetrocite_heatsinks:    i8
    # bit 6.5
    count_tachyon_scanners:       i8
    # bit 6.6
    count_gridscan_overload:      i8
    # bit 6.7
    count_override_authorization: i8
    # bit 6.8
    count_resupply_imperatives:   i8

    # bit 7.1
    count_patrol_group:           i8
    # bit 7.2
    count_fast_supply:            i8
    # bit 7.3
    count_vanguard_refit_helm:    i8
    # bit 7.4
    count_vanguard_refit_weap:    i8
    # bit 7.5
    count_vanguard_refit_comm:    i8
    # bit 7.6
    count_vanguard_refit_station: i8
    # bit 7.7
    count_vanguard_refit_eng:     i8
    # bit 7.8
    count_vanguard_refit_systems: i8

    ## time
    # bit 8.1
    time_infusion_p_coils:       u16
    # bit 8.2
    time_hydrogen_ram:           u16
    # bit 8.3
    time_tauron_focusers:        u16
    # bit 8.4
    time_carapaction_coils:      u16
    # bit 8.5
    time_polyphasic_capacitors:  u16
    # bit 8.6
    time_cetrocite_crystals:     u16
    # bit 8.7
    time_lateral_array:          u16
    # bit 8.8
    time_ecm_starpulse:          u16

    # bit 9.1
    time_double_agent:           u16
    # bit 9.2
    time_wartime_production:     u16
    # bit 9.3
    time_infusion_p_coils_perm:  u16
    # bit 9.4
    time_protonic_verniers:      u16
    # bit 9.5
    time_tauron_focusers_perm:   u16
    # bit 9.6
    time_regenerative_pau_grids: u16
    # bit 9.7
    time_veteran_damcon_teams:   u16
    # bit 9.8
    time_cetrocite_heatsinks:    u16

    # bit 10.1
    time_tachyon_scanners:       u16
    # bit 10.2
    time_gridscan_overload:      u16
    # bit 10.3
    time_override_authorization: u16
    # bit 10.4
    time_resupply_imperatives:   u16
    # bit 10.5
    time_patrol_group:           u16
    # bit 10.6
    time_fast_supply:            u16
    # bit 10.7
    time_vanguard_refit_helm:    u16
    # bit 10.8
    time_vanguard_refit_weap:    u16

    # bit 11.1
    time_vanguard_refit_comm:    u16
    # bit 11.2
    time_vanguard_refit_station: u16
    # bit 11.3
    time_vanguard_refit_eng:     u16
    # bit 11.4
    time_vanguard_refit_systems: u16

object Torpedo(2)
    # X coordinate (bit 1.1, float)
    # The torpedo's location on the X axis.
    x_coordinate: f32

    # Y coordinate (bit 1.2, float)
    # The torpedo's location on the Y axis.
    y_coordinate: f32

    # Z coordinate (bit 1.3, float)
    # The torpedo's location on the Z axis.
    z_coordinate: f32

    # Unknown (bit 1.4, float?)
    # Appears to range from -1.0 to 1.0.
    __unknown_2: f32

    # Unknown (bit 1.5, float)
    __unknown_3: f32

    # Unknown (bit 1.6, float)
    __unknown_4: f32

    # Unknown (bit 1.7, int)
    __unknown_5: u32

    # Unknown (bit 1.8, int)
    __unknown_6: u32

object WeaponsConsole(4)
    # Ordnance counts (bits 1.1-1.5, byte array)
    # This array contains up to five byte elements. Each element
    # gives how many of a particular ordinance are stored on the
    # ship, in the following order: homing missiles, nukes, mines,
    # EMPs, plasma shocks.
    homing: u8
    nukes: u8
    mines: u8
    emps: u8

    # The plasma shock torpedo type was added in v.2.1.5. It was
    # inserted at bit 1.5, and all subsequent bits were shifted by one
    # bit. Before this addition, the bit field was only three bytes
    # long instead of four.
    plasma: u8

    # Unknown (bit 1.6, byte)
    _unknown: u8

    # Tube (un)load times (bits 1.7-2.4, float array)
    #
    # This array contains up to six float elements. Each element
    # gives the (un)load time for the corresponding tube. This field
    # should be ignored (even when present) if the tube's status is
    # not loading or unloading.
    tube_times: sizedarray<f32, 6>

    # Tube status (bits 2.5-3.2, byte array)
    #
    # This array contains up to six byte elements. Each element
    # indicates the occupation status of each tube.
    tube_status: sizedarray<enum<u8, TubeStatus>, 6>

    # Ordnance type (bits 3.3-3.8, byte array)
    #
    # This array contains up to six byte elements. Each element
    # indicates the type of ordnance in each tube. If the tube's
    # status is unloaded, the tube is empty, and this field should be
    # ignored even when present.
    ordnance_type: sizedarray<enum<u8, OrdnanceType>, 6>

    ## Unused (bits 4.1-4.8)

# This type became obsolete starting v2.1.5, when whales were folded
# into the new creature object type.
object Whale(2)
    # Name (bit 1.1, string)
    #
    # Always “WHALE” in non-custom missions.
    name: string

    # Unknown (bit 1.2, int)
    __unknown_1: u32

    # Unknown (bit 1.3, int)
    __unknown_2: u32

    # X coordinate (bit 1.4, float)
    x_coordinate: f32

    # Y coordinate (bit 1.5, float)
    y_coordinate: f32

    # Z coordinate (bit 1.6, float)
    z_coordinate: f32

    # Pitch (bit 1.7, float)
    pitch: f32

    # Roll (bit 1.8, float)
    roll: f32

    # Heading (bit 2.1, float)
    heading: f32

    # Unknown (bit 2.2, float)
    __unknown_3: f32

    # Unknown (bit 2.3, float)
    # Values range from 0.0 to 1.0.
    __unknown_4: f32

    # Unknown (bit 2.4, float)
    # Values range up to 1.0. Lowest value seen so far is
    # approximately 0.855, minimum might be 0.0.
    __unknown_5: f32

    # Unknown (bit 2.5, float)
    # Observed ranges have been from about 0.5 to 1.36.
    __unknown_6: f32

# The remaining object types (asteroids, black holes and mines)
# all use the same properties. Prior to v2.1.5, anomalies and
# space monsters also used this structure.
object Asteroid(1)
    # X coordinate (bit 1.1, float)
    # The object's location on the X axis.
    x_coordinate: f32

    # Y coordinate (bit 1.2, float)
    # The object's location on the Y axis.
    y_coordinate: f32

    # Z coordinate (bit 1.3, float)
    # The object's location on the Z axis.
    z_coordinate: f32

    # Name (bit 1.4, string)
    # The object's name. In standard missions, this property is
    # never used, but there may be named asteroids, black holes or
    # mines in custom missions.
    name: string

    ## Unknown (bit 1.4, float?)
    ## __unknown_1: f32

    # Unknown (bit 1.5, float)
    __unknown_2: f32

    # Unknown (bit 1.6, float)
    __unknown_3: f32

    # Unknown (bit 1.7, int)
    __unknown_4: u32

    # Unknown (bit 1.8, int)
    __unknown_5: u32

# The remaining object types (asteroids, black holes and mines)
# all use the same properties. Prior to v2.1.5, anomalies and
# space monsters also used this structure.
object Blackhole(1)
    # X coordinate (bit 1.1, float)
    # The object's location on the X axis.
    x_coordinate: f32

    # Y coordinate (bit 1.2, float)
    # The object's location on the Y axis.
    y_coordinate: f32

    # Z coordinate (bit 1.3, float)
    # The object's location on the Z axis.
    z_coordinate: f32

    # Name (bit 1.4, string)
    # The object's name. In standard missions, this property is
    # never used, but there may be named asteroids, black holes or
    # mines in custom missions.
    name: string

    ## Unknown (bit 1.4, float?)
    ## __unknown_1: f32

    # Unknown (bit 1.5, float)
    __unknown_2: f32

    # Unknown (bit 1.6, float)
    __unknown_3: f32

    # Unknown (bit 1.7, int)
    __unknown_4: u32

    # Unknown (bit 1.8, int)
    __unknown_5: u32

# The remaining object types (asteroids, black holes and mines)
# all use the same properties. Prior to v2.1.5, anomalies and
# space monsters also used this structure.
object Mine(1)
    # X coordinate (bit 1.1, float)
    # The object's location on the X axis.
    x_coordinate: f32

    # Y coordinate (bit 1.2, float)
    # The object's location on the Y axis.
    y_coordinate: f32

    # Z coordinate (bit 1.3, float)
    # The object's location on the Z axis.
    z_coordinate: f32

    # Name (bit 1.4, string)
    # The object's name. In standard missions, this property is
    # never used, but there may be named asteroids, black holes or
    # mines in custom missions.
    name: string

    ##  Unknown (bit 1.4, float?)
    ## __unknown_1: f32

    # Unknown (bit 1.5, float)
    __unknown_2: f32

    # Unknown (bit 1.6, float)
    __unknown_3: f32

    # Unknown (bit 1.7, int)
    __unknown_4: u32

    # Unknown (bit 1.8, int)
    __unknown_5: u32
