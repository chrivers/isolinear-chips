packet ServerPacket
    AllShipSettings
        # A list of the eight available player ships. Each ship is structured as
        # follows:
        ships: sizedarray<struct<Ship>, 8>

    BeamFired
        # A unique identifier for this beam. Each time a beam is fired, it gets
        # its own ID.
        id: i32

        # All ships that can fire beams have beam ports. These are defined in
        # vesselData.xml as <beam_port> entries. This value gives the index of
        # the beam port on the originating ship that fired the beam. This value
        # is zero-based; thus, vessels that only have one beam port will always
        # give 0 for this value.
        beam_port_index: i32

        # Indicates the type of object that fired the beam.
        origin_object_type: i32

        # Indicates the type of object that was struck by the beam.
        target_object_type: i32

        # The ID of the object that fired the beam.
        origin_object_id: u32

        # The ID of the object that was struck by the beam.
        target_object_id: u32

        # The X coordinate (relative to the center of the target) of the impact
        # point. This is used to determine the endpoint for the beam. A negative
        # value means an impact on the target's starboard (right) side; a
        # positive value means an impact on the target's port (left) side.
        target_x_coordinate: f32

        # The Y coordinate (relative to the center of the target) of the impact
        # point. This is used to determine the endpoint for the beam. A negative
        # value means an impact on the target's ventral (bottom) side; a
        # positive value means an impact on the target's dorsal (top) side.
        target_y_coordinate: f32

        # The Z coordinate (relative to the center of the target) of the impact
        # point. This is used to determine the endpoint for the beam. A negative
        # value means an impact on the target's aft (rear) side; a positive
        # value means an impact on the target's forward (front) side.
        target_z_coordinate: f32

        # Indicates whether the beam was auto- or manually-fired.
        targeting_mode: f32

        __unknown_1: u32
        __unknown_2: u32
        __unknown_3: u32

    CommsIncoming
        # Indicates the channel on which the message was received. Values range
        # from 0x00 to 0x08. In the stock client, this affects the message's
        # background color; the lower the channel number, the more red the
        # background color. While this would seem to indicate priority, in
        # practice, the channel number doesn't seem to correlate with message
        # importance. Below is a list of message types received on each channel;
        # note that this list may be incomplete and custom scenarios may send
        # messages on any channel:
        #   0x00 = Enemy taunts
        #   0x01 = ?
        #   0x02 = ?
        #   0x03 = Base destroyed
        #   0x04 = Base is under attack, docking complete, ship refuses orders
        #   0x05 = Base acknowledges build order or docking request
        #   0x06 = Ship accepts orders, base status response, ordnance built notice, GM message
        #   0x07 = Mission notification, mission transfer complete
        #   0x08 = Messages sent from player ships
        channel: i32

        # The name of the entity that sent the message. Note that this does not
        # necessarily correspond to the exact name of that entity. This field
        # appears to always at least start with the name of the originating ship
        # or station in non-scripted missions, but may have additional text
        # afterward (e.g. “DS3 TSN Base”). Custom missions could have any string
        # in this field.
        sender: string

        # The contents of the incoming message. The carat symbol (^) in the
        # message indicates a line break.
        message: string

    ConsoleStatus
        # The number of the ship whose consoles are being described. Before
        # v2.3.0, this value was one-based, so by default the ship identified by
        # 0x01 was Artemis. As of v2.3.0 it is now zero-based.
        ship_number: i32

        # This array contains one element for each possible console, with the
        # availability status of each console represented with a single byte.
        # The consoles are iterated in the order given by the console type
        # enumeration. Note that the helm, weapons, engineering, and game master
        # stations permit only one client to claim them. Once they've been
        # claimed, their status will be reported as unavailable to other
        # clients. All other stations will remain available to other clients
        # when claimed.
        console_status: map<ConsoleType, enum<u8, ConsoleStatus>>

    DestroyObject
        # Indicates the type of object being destroyed.
        object_type: enum<u8, ObjectType>

        # The ID of the object being destroyed.
        object_id: u32

    Difficulty
        # The difficulty level (a value from 1 to 11).
        difficulty: i32

        # A value indicating the type of game. This applies only to solo and co-
        # op games; the field is present but its value is undefined for PvP and
        # scripted games.
        game_type: enum<u32, GameType>

    DmxMessage
        # The DMX flag name.
        name: string

        # The DMX flag's current state.
        state: bool32

    EngAutoDamconUpdate
        # Whether DAMCON teams are directed autonomously or not.
        damcon_autonomy: bool32

    EngGridUpdate
        # Requested: This field is false on normal engineering
        # update from the server, but will be set to 1 when in
        # response to the RequestEngGridUpdate packet.
        requested: bool8

        # This array contains a list of system nodes, terminated with 0xff.
        system_grid_status: array<struct<SystemNodeStatus>, 0xff>

        # This contains a list of DAMCON teams, terminated with 0xfe.
        damcon_team_status: array<struct<DamconTeamStatus>, 0xfe>

    FighterBayStatus
        # The payload consists of an array of structs, each one
        # describing a single fighter, and terminated with
        # 0x00000000.
        status: array<struct<FighterBay>, 0x00000000>

    FighterLaunched
        # The ID of the fighter, as shown in FighterBayStatusPacket.
        object_id: u32

    GameMasterButtonCreate
        label: string

    GameMasterButtonCreatePlace
        label: string
        width: u32
        height: u32
        x: u32
        y: u32

    GameMasterButtonDestroy
        label: string

    GameMasterOverview
        title: string
        instructions: string

    GameMasterButtonReset

    GameMessage
        # The message to display.
        message: string

    GameOver

    GameOverReason
        # Text describing why the game ended. Each string is one line.
        reason: array<string>

    GameOverStats
        # Stats are presented in vertical columns; each packet contains one
        # column of stats data. This fields is the index for this column of
        # data. In practice, there are only two possible values: 0 and 1.
        column_index: u8

        # The remaining bytes in the packet are an array, where each
        # element constitutes a row in the stats column. The last
        # element is followed by 0xce.
        statistics: array<struct<Statistic>, 0xce>

    Heartbeat

    DestroyObject2
        # The type of object destroyed.
        object_type: enum<u32, ObjectType>

        # The ID of the object destroyed.
        object_id: u32

    IncomingAudio
        # The ID for this audio message.
        audio_id: i32

        # “Incoming” means that the communications officer is to be notified
        # that an audio message is available, and offered the option to play or
        # dismiss it. “Playing” is given in response to the communications
        # officer giving the instruction to play the message, and notifies them
        # that the message is now being played by the main screen. In the stock
        # client, this results in the “Play” button changing to “REPlay.” (sic)
        audio_mode: enum<u32, AudioMode>

        # Title of the incoming message. This should be displayed to the COMMs
        # officer.
        title: option<string>

        # The filename for the audio clip. The client doesn't need to do
        # anything with this string; as the audio is played by the server.
        file: option<string>

    Intel
        # The ID of the ship to which this intel pertains.
        object_id: u32

        # Values of 0 and 1 have been observed
        __unknown_1: u8

        # The intel message about the ship. This is displayed to the science
        # officer when selecting this ship.
        intel: string

    JumpStatusBegin

    JumpStatusEnd

    KeyCaptureToggle
        # Whether this console should capture keystrokes or not. Note that
        # because this packet is sent to all consoles when the capture status
        # of any console is changed, a console may get a KeyCaptureTogglePacket
        # telling it to do what it's already doing; this is normal.
        capture: bool8

    ObjectUpdate
        # The payload consists of an array of object update
        # entries. Parsing continues in a loop until the end of the
        # packet is reached, or the object type byte is 0x00. Note
        # that the array may be empty
        updates: array<struct<ObjectUpdate>, 0x00000000>

    Pause
        # True if the simulation is paused; false otherwise.
        paused: bool32

    Perspective
        # The current main screen perspective.
        perspective: enum<u32, Perspective>

    PlayerShipDamage
        __unknown_1: u32
        __unknown_2: f32

    Skybox
        # The number of the skybox image to load on the client. Under the
        # Artemis install directory is an "art" folder; this folder contains a
        # bunch of subfolders whose names start with "sb" followed by a two-
        # digit decimal value. This value is the skybox ID, and each folder
        # contains image files for a single skybox. The stock install of Artemis
        # has skybox images for IDs 00 through 05 and 10 through 29. It is
        # presumed but not yet confirmed that other skybox IDs will work if a
        # corresponding folder is created and contains the appropriate files.
        skybox_id: i32

    SoundEffect
        # Path to the file to play the sound effect from, e.g "dat/enemy-
        # explode.wav".
        filename: string

    Version
        # Probably a monotonic event counter
        __unknown_1: u32

        # The version of Artemis running on the server. If the client doesn't
        # support the given version, it should disconnect. This field is
        # deprecated as of v2.1; it is still sent by the server, but client
        # should ignore its value unless there are no more bytes after it in the
        # packet.
        _old_version: f32

        # These three int values constitute the major, minor and patch version
        # numbers. For example, v2.1.1 will transmit 02000000 01000000 01000000
        # (interpreted 2 1 1) for this field. If the client doesn't support the
        # given version, it should disconnect. The version specified in this
        # field supersedes any specified in the legacy version field.
        ## version_major: u32,
        ## version_minor: u32,
        ## version_patch: u32,
        version: sizedarray<u32, 3>

    Welcome
        # Unlike all other strings in Artemis packets, this one is encoded in
        # plain ASCII, so each character is one byte, not two. Also, the given
        # length for the string does not include a terminating null. Currently,
        # it says, "You have connected to Thom Robertson's Artemis Bridge
        # Simulator. Please connect with an authorized game client."
        welcome_message: ascii_string

    __unknown_1
        probably_x_coordinate: f32
        probably_y_coordinate: f32
        probably_z_coordinate: f32

    __unknown_2
        __unknown_1: f32

    __unknown_3
        __unknown_1: u32
        __unknown_2: u32
